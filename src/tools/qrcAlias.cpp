/*
 * SPDX-FileCopyrightText: 2016 Kåre Särs <kare.sars@iki.fi>
 * SPDX-FileCopyrightText: 2024 Christoph Cullmann <cullmann@kde.org>
 *
 * SPDX-License-Identifier: LGPL-2.0-or-later
 */

#include <QCommandLineParser>
#include <QCoreApplication>
#include <QDebug>
#include <QDir>
#include <QDirIterator>
#include <QFile>
#include <QFileInfo>
#include <QRegularExpression>
#include <QString>

/**
 * Given a dir and a file inside, resolve the pseudo symlinks we get from Git on Windows.
 * Does some consistency checks, will die if they fail.
 *
 * @param path directory that contains the given file
 * @param fileName file name of the dir to check if it is a pseudo link
 * @return target of the link or empty string if no link
 */
static QString link(const QString &path, const QString &fileName)
{
    QFile in(path + QLatin1Char('/') + fileName);
    if (!in.open(QIODevice::ReadOnly)) {
        qFatal() << "failed to open" << path << fileName << in.fileName();
        return QString();
    }

    QString firstLine = QString::fromLocal8Bit(in.readLine());
    if (firstLine.isEmpty()) {
        return QString();
    }
    QRegularExpression fNameReg(QStringLiteral("(.*\\.(?:svg|png|gif|ico))$"));
    QRegularExpressionMatch match = fNameReg.match(firstLine);
    if (!match.hasMatch()) {
        return QString();
    }

    QFileInfo linkInfo(path + QLatin1Char('/') + match.captured(1));
    QString aliasLink = link(linkInfo.path(), linkInfo.fileName());
    if (!aliasLink.isEmpty()) {
        // qDebug() <<  fileName << "=" << match.captured(1) << "=" << aliasLink;
        return aliasLink;
    }

    return path + QLatin1Char('/') + match.captured(1);
}

/**
 * Generates for the given directories a resource file with the full icon theme.
 * Does some consistency checks, will die if they fail.
 *
 * @param indirs directories that contains the icons of the theme, the first is the versioned stuff,
 *               the remainings contain generated icons
 * @param outfile QRC file to generate
 */
static void generateQRCAndCheckInputs(const QStringList &indirs, const QString &outfile)
{
    QFile out(outfile);
    if (!out.open(QIODevice::WriteOnly)) {
        qFatal() << "Failed to create" << outfile;
    }
    out.write("<!DOCTYPE RCC><RCC version=\"1.0\">\n");
    out.write("<qresource>\n");

    for (const auto &indir : indirs) {
        // go to input dir to have proper relative paths
        if (!QDir::setCurrent(indir)) {
            qFatal() << "Failed to switch to input directory" << indir;
        }

        // we look at all interesting files in the indir and create a qrc with resolved symlinks
        QDirIterator it(QStringLiteral("."),
                        {QStringLiteral("*.theme"), QStringLiteral("*.svg"), QStringLiteral("*.png"), QStringLiteral("*.gif"), QStringLiteral("*.ico")},
                        QDir::Files,
                        QDirIterator::Subdirectories);
        while (it.hasNext()) {
            // ensure nice path without ./ and Co.
            const auto file = QDir::current().relativeFilePath(it.next());
            const QFileInfo fileInfo(file);

            // per default we write the relative name as alias and the full path to pack in
            // allows to generate the resource out of source
            auto fullPath = fileInfo.absoluteFilePath();

            // real symlink resolving for Unices, the rcc compiler ignores such files in -project mode
            if (fileInfo.isSymLink()) {
                const auto linkPath = fileInfo.canonicalFilePath();
                if (linkPath.isEmpty()) {
                    qFatal() << "Broken symlink" << file << "in input directory" << indir;
                }
                fullPath = QFileInfo(linkPath).absoluteFilePath();
            }

            // pseudo link files generated by Git on Windows
            else if (const auto aliasLink = link(fileInfo.path(), fileInfo.fileName()); !aliasLink.isEmpty()) {
                fullPath = QFileInfo(aliasLink).absoluteFilePath();
            }

            // write the one alias to file entry
            out.write(QStringLiteral("    <file alias=\"%1\">%2</file>\n").arg(file, fullPath).toUtf8());
        }
    }

    out.write("</qresource>\n");
    out.write("</RCC>\n");
}

int main(int argc, char *argv[])
{
    QCoreApplication app(argc, argv);

    QCommandLineParser parser;
    QCommandLineOption outOption(QStringList() << QLatin1String("o") << QLatin1String("outfile"), QStringLiteral("Output qrc file"), QStringLiteral("outfile"));
    parser.setApplicationDescription(QLatin1String("Create a resource file from the given input directories handling symlinks and pseudo symlink files."));
    parser.addHelpOption();
    parser.addVersionOption();
    parser.addOption(outOption);
    parser.process(app);

    // do the generation and checks, will die on errors
    generateQRCAndCheckInputs(parser.positionalArguments(), parser.value(outOption));
    return 0;
}
